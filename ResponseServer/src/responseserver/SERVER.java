/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package responseserver;

import com.sun.net.httpserver.Headers;
import com.sun.net.httpserver.HttpContext;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author Yashwant Kumar
 */
public class SERVER extends javax.swing.JFrame {
public static String da ,Resp;
  public static Connection connect = null;
    private Statement statement = null;
    private ResultSet resultSet = null;
   public static String nm= null;
   
   
     public String tim;
    public String dt,id;
    /**
     * Creates new form NewJFrame
     */
public String as;


   Timer fptimer2 = new javax.swing.Timer(1000, new ActionListener() {
        public void actionPerformed(ActionEvent e) {
        date();
        } });

    public SERVER()throws SQLException {
        initComponents();
        this.setLocationRelativeTo(this); 
        LoadInitial();
        fptimer2.start();
    }
     
      private void LoadInitial(){
       
         try{
    // This will load the MySQL driver, each DB has its own driver
         Class.forName("com.mysql.jdbc.Driver");
            // Setup the connection with the DB
            connect = DriverManager
                    .getConnection("jdbc:mysql://127.0.0.1/RFID_PROJECT?"
                            + "user=root&password=1234");
          
         System.out.println("MySQL Started!");   
    }
    catch(Exception ex){System.out.println("MySQL Error: "+ex.getMessage());}
 
       
   }
    public void date(){
         DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
	LocalDate localDate = LocalDate.now();
        DateFormat dateFormat = new SimpleDateFormat("hh:mm a");
       // LocalTime lc=LocalTime.now();
        

        LocalTime localTime = LocalTime.now();
DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("hh:mm:ss a");
tim=localTime.format(dateTimeFormatter);

        dt=dtf.format(localDate);
        
        //System.out.println("TIME==========="+tim);
        //System.out.println("DAte==========="+dt);
        // jLabel12.setText(dt);
         //jLabel11.setText(tim);
        // IllegalArgumentException
      
   
    }
   
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(113, 128, 147));

        jPanel1.setBackground(new java.awt.Color(113, 128, 147));

        jButton1.setText("Start Server");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(106, 106, 106)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(121, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 127, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(34, 34, 34)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(29, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        HttpServerStart();
    }//GEN-LAST:event_jButton1ActionPerformed
private void HttpServerStart(){
    try{
       HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);
        server.createContext("/ArdServer", new MyHandler());
        server.setExecutor(null); // creates a default executor
        server.start();
        System.out.println("Server Started!");
        jButton1.setEnabled(false);
    }
    catch(Exception ex){System.out.println("Error: "+ex.getMessage());}
 
    
}
    

 class MyHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange he) throws IOException {
       
        
           if (he.getRequestMethod().equalsIgnoreCase("POST")) {
           
          // REQUEST Headers
          Headers requestHeaders = he.getRequestHeaders();
        
       //   Set<Map.Entry<String, List<String>>> entries = requestHeaders.entrySet();
 
          int contentLength = Integer.parseInt(requestHeaders.getFirst("Content-length"));
           
         // REQUEST Body
                    InputStream is = he.getRequestBody();

     System.out.println("DATA AVALABLE!!!");
     try{
                    byte[] data = new byte[contentLength];
                    int length = is.read(data);
                    String clientdata=new String(data);
                    //re.jTextField3.setText(clientdata);
                    //jTextField1.setText(clientdata);
                    System.out.println("DATA++"+clientdata);
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 statement = connect.createStatement(); 
            String sqlstr="select count(*),name,UID from userd where  RFID=md5('"+clientdata+"')";
            resultSet = statement.executeQuery(sqlstr);  
            resultSet.next();
           
           System.out.println("Name======"+resultSet.getString(2));
            System.out.println("UID======"+resultSet.getString(3));
           nm=resultSet.getString(2);
           id=resultSet.getString(3);
            int count=resultSet.getInt(1);
            System.out.println(count);
 if(count>=1){
     
          String sqlstr2="select count(*) from attendance where Date='"+dt+"' and UID='"+id+"'";
                resultSet = statement.executeQuery(sqlstr2);  
            resultSet.next();
            int count2=resultSet.getInt(1);
            System.out.println("COUNTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"+count2);
              if(count2>=1){
                    //jTextField6.setText("TimeOUT : "+tim);
                 statement.executeUpdate("Update attendance set TimeOUT='"+tim+"'  where Date='"+dt+"' and UID='"+id+"'");
                      String sqlstr3="select TimeIN from attendance where Date='"+dt+"' and UID='"+id+"'";
                resultSet = statement.executeQuery(sqlstr3);  
           resultSet.next();
            String ti=resultSet.getString(1);
            Resp=nm+"\n\nTime In : "+ti+"\n\nTime Out: "+tim;
            //jTextField5.setText("TimeIN : "+ti);
          
                }
              
                else{
                   System.out.println("ELSEEEEEEE");
                    try { String sqlstr4="INSERT INTO attendance (Date,UID,Name,TimeIN) values('"+dt+"','"+id+"','"+nm+"','"+tim+"')";
                       
                            // System.out.println(sqlstr4);
                          //statement.executeQuery(sqlstr4);  
                          statement.executeUpdate(sqlstr4);  
           
                            Resp=nm+"\n\nTime In: "+tim;
                            //jTextField5.setText("TimeIN : "+tim);
                            //  System.out.println("ELSEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE");
                        } catch (SQLException ex) {
                            Logger.getLogger(SERVER.class.getName()).log(Level.SEVERE, null, ex);
                        }
                }
  /////////////////////////////////////////////////////////////////////////////////////////////////////          
             String response = Resp;
            he.sendResponseHeaders(20, response.length());
            OutputStream os = he.getResponseBody();
            os.write(response.getBytes());
            os.close();
  ///////////////////////////////////////////////////////////////////////////////////////          
           } else{
 String response = "User not Registered!";
            he.sendResponseHeaders(10, response.length());
            OutputStream os = he.getResponseBody();
            os.write(response.getBytes());
            os.close();
 }}
    
 
     
 catch(Exception ex){System.out.println("Error: "+ex.getMessage());}
 
 
 
 
         
       
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
           }
        }
        }
        
    







    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SERVER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SERVER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SERVER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SERVER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new SERVER().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(SERVER.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
